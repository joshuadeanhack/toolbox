packer {
  required_plugins {
    amazon = {
      version = ">= 0.0.2"
      source  = "github.com/hashicorp/amazon"
    }
  }
}

variable DefaultAdministratorPassword {
  default     = "torrentbox"
  description = "A default password to use for logging into the image"
  type        = string
}

variable VPC_ID {
  default     = "Enter-VPC"
  description = "Add your VPC here"
  type        = string
}

variable Subnet_ID {
  default     = "Enter-Subnet"
  description = "Add your Subnet ID here"
  type        = string
}

variable AWS_Profile {
  default     = "enter-aws-user"
  description = "Your local profile name for AWS Credentials"
  type        = string
}

source "amazon-ebs" "windows2022" {
  ami_name      = "torrentbox-{{timestamp}}"
  instance_type = "c6a.4xlarge"
  region        = "eu-west-1"

  # Spin up build instance in a subnet internet access
  vpc_id    = var.VPC_ID
  subnet_id = var.Subnet_ID

  # AWS Credentials profile to use ~/.aws/credentials
  profile = var.AWS_Profile

  # Find the latest Windows Server 2022 Image
  source_ami_filter {
    filters = {
      name                = "Windows_Server-2022-English-Full-Base-*"
      root-device-type    = "ebs"
      virtualization-type = "hvm"
    }
    most_recent = true
    owners      = ["801119661308"]
  }

  # Windows Settings
  # The AWS auto-generated password is automatically retrieved with Packer
  communicator   = "winrm"
  winrm_username = "Administrator"
  winrm_insecure = true
  winrm_use_ssl  = true

  # This user data file sets up winrm and configures it so that the connection
  # from Packer is allowed. Without this file being set, Packer will not
  # connect to the instance.
  user_data_file = "./windows-packer/winrm_bootstrap.txt"

  # Add AMI Tags
  tags = {
    Name       = "torrentBox {{isotime `2006-01-02 3:04PM`}}"
    OS_Version = "WindowsServer2022-Base"
  }
}

build {
  # Build Step Friendly Name
  name    = "torrentbox"
  sources = ["source.amazon-ebs.windows2022"]

  # Display autogenerated password
  provisioner "powershell" {
    environment_vars = ["WINRMPASS=${build.Password}"]
    inline           = ["Write-Host \"Automatically generated aws password is: $Env:WINRMPASS\""]
  }

  # Run Windows Configuration which sets a default password for Administrator on next boot
  provisioner "powershell" {
    environment_vars = [
      "SetAdminPassword=${var.DefaultAdministratorPassword}"
    ]
    elevated_user     = "Administrator"
    elevated_password = build.Password
    script            = "./torrent-box-configuration.ps1"
  }
}